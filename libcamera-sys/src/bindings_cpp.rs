/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage> {
        storage: Storage,
    }
    impl<Storage> __BindgenBitfieldUnit<Storage> {
        #[inline]
        pub const fn new(storage: Storage) -> Self {
            Self { storage }
        }
    }
    impl<Storage> __BindgenBitfieldUnit<Storage>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        fn extract_bit(byte: u8, index: usize) -> bool {
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            Self::extract_bit(byte, index)
        }
        #[inline]
        pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
            debug_assert!(index / 8 < core::mem::size_of::<Storage>());
            let byte_index = index / 8;
            let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
            Self::extract_bit(byte, index)
        }
        #[inline]
        fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                byte | mask
            } else {
                byte & !mask
            }
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            *byte = Self::change_bit(*byte, index, val);
        }
        #[inline]
        pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
            debug_assert!(index / 8 < core::mem::size_of::<Storage>());
            let byte_index = index / 8;
            let byte = (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
            *byte = Self::change_bit(*byte, index, val);
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if Self::raw_get_bit(this, i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
        #[inline]
        pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[doc = r" If Bindgen could only determine the size and alignment of a"]
    #[doc = r" type, it is represented like this."]
    #[derive(PartialEq, Copy, Clone, Debug, Hash)]
    #[repr(C)]
    pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
    impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
        fn default() -> Self {
            Self([<T as Default>::default(); N])
        }
    }
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub const fn new() -> Self {
            __BindgenUnionField(::std::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::std::mem::transmute(self)
        }
    }
    impl<T> ::std::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            *self
        }
    }
    impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
    #[allow(unused_imports)]
    use self::super::root;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        pub struct basic_string<_CharT> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            pub _M_dataplus: root::std::basic_string__Alloc_hider,
            pub _M_string_length: root::std::basic_string_size_type,
            pub __bindgen_anon_1: root::std::basic_string__bindgen_ty_2<_CharT>,
        }
        pub type basic_string__Char_alloc_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type basic_string__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type basic_string_traits_type<_Traits> = _Traits;
        pub type basic_string_value_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type basic_string_allocator_type = root::std::basic_string__Char_alloc_type;
        pub type basic_string_size_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type basic_string_difference_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type basic_string_reference = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type basic_string_const_reference = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type basic_string_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type basic_string_const_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type basic_string_iterator = root::__gnu_cxx::__normal_iterator<root::std::basic_string_pointer>;
        pub type basic_string_const_iterator =
            root::__gnu_cxx::__normal_iterator<root::std::basic_string_const_pointer>;
        pub type basic_string_const_reverse_iterator =
            root::std::reverse_iterator<root::std::basic_string_const_iterator>;
        pub type basic_string_reverse_iterator = root::std::reverse_iterator<root::std::basic_string_iterator>;
        pub type basic_string___const_iterator = root::std::basic_string_const_iterator;
        pub type basic_string___sv_type<_CharT> = root::std::basic_string_view<_CharT>;
        pub type basic_string__If_sv = root::std::enable_if_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_string___sv_wrapper<_CharT> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            pub _M_sv: root::std::basic_string___sv_type<_CharT>,
        }
        #[repr(C)]
        pub struct basic_string__Alloc_hider {
            pub _M_p: root::std::basic_string_pointer,
        }
        pub const basic_string__S_local_capacity: root::std::basic_string__bindgen_ty_1 = 0;
        pub type basic_string__bindgen_ty_1 = i32;
        #[repr(C)]
        pub struct basic_string__bindgen_ty_2<_CharT> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            pub _M_local_buf: root::__BindgenUnionField<*mut _CharT>,
            pub _M_allocated_capacity: root::__BindgenUnionField<root::std::basic_string_size_type>,
            pub bindgen_union_field: u64,
        }
        pub type integral_constant_value_type<_Tp> = _Tp;
        pub type integral_constant_type = u8;
        pub type __bool_constant = u8;
        pub type true_type = u8;
        pub type false_type = u8;
        pub type __enable_if_t = u8;
        pub type __conditional_type<_Tp> = _Tp;
        pub type __conditional_t = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __type_identity {
            pub _address: u8,
        }
        pub type __type_identity_type<_Type> = _Type;
        pub mod __detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _NodeBuilder {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct _ReuseOrAllocNode {
                pub _M_nodes: root::std::__detail::_ReuseOrAllocNode___node_ptr,
                pub _M_h: *mut root::std::__detail::_ReuseOrAllocNode___hashtable_alloc,
            }
            pub type _ReuseOrAllocNode___node_alloc_type<_NodeAlloc> = _NodeAlloc;
            pub type _ReuseOrAllocNode___hashtable_alloc = root::std::__detail::_Hashtable_alloc;
            pub type _ReuseOrAllocNode___node_alloc_traits = root::std::__detail::_ReuseOrAllocNode___hashtable_alloc;
            pub type _ReuseOrAllocNode___node_ptr = root::std::__detail::_ReuseOrAllocNode___hashtable_alloc;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _AllocNode {
                pub _M_h: *mut root::std::__detail::_AllocNode___hashtable_alloc,
            }
            pub type _AllocNode___hashtable_alloc = root::std::__detail::_Hashtable_alloc;
            pub type _AllocNode___node_ptr = root::std::__detail::_AllocNode___hashtable_alloc;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Hash_node_base {
                pub _M_nxt: *mut root::std::__detail::_Hash_node_base,
            }
            #[allow(clippy::unnecessary_operation, clippy::identity_op)]
            const _: () = {
                ["Size of _Hash_node_base"][::std::mem::size_of::<_Hash_node_base>() - 8usize];
                ["Alignment of _Hash_node_base"][::std::mem::align_of::<_Hash_node_base>() - 8usize];
                ["Offset of field: _Hash_node_base::_M_nxt"][::std::mem::offset_of!(_Hash_node_base, _M_nxt) - 0usize];
            };
            #[repr(C)]
            pub struct _RehashStateGuard<_RehashPolicy> {
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_RehashPolicy>>,
                pub _M_guarded_obj: *mut _RehashPolicy,
                pub _M_prev_state: root::__BindgenOpaqueArray<u8, 0usize>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Rehash_base {
                pub _address: u8,
            }
            pub type _Hash_code_base___ebo_hash = u8;
            pub type _Hash_code_base_hasher<_Hash> = _Hash;
            pub type _Hash_code_base___hash_code = usize;
            pub type _Local_iterator___base_type = u8;
            pub type _Local_iterator___hash_code_base = root::std::__detail::_Local_iterator___base_type;
            pub type _Local_iterator_value_type<_Value> = _Value;
            pub type _Local_iterator_pointer = root::std::__conditional_t;
            pub type _Local_iterator_reference = root::std::__conditional_t;
            pub type _Local_iterator_difference_type = isize;
            pub type _Local_iterator_iterator_category = root::std::forward_iterator_tag;
            pub type _Local_const_iterator___base_type = u8;
            pub type _Local_const_iterator___hash_code_base = root::std::__detail::_Local_const_iterator___base_type;
            pub type _Local_const_iterator_value_type<_Value> = _Value;
            pub type _Local_const_iterator_pointer<_Value> =
                *const root::std::__detail::_Local_const_iterator_value_type<_Value>;
            pub type _Local_const_iterator_reference<_Value> =
                *const root::std::__detail::_Local_const_iterator_value_type<_Value>;
            pub type _Local_const_iterator_difference_type = isize;
            pub type _Local_const_iterator_iterator_category = root::std::forward_iterator_tag;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Hashtable_base {
                pub _address: u8,
            }
            pub type _Hashtable_base_key_type<_Key> = _Key;
            pub type _Hashtable_base_value_type<_Value> = _Value;
            pub type _Hashtable_base_key_equal<_Equal> = _Equal;
            pub type _Hashtable_base_size_type = usize;
            pub type _Hashtable_base_difference_type = isize;
            pub type _Hashtable_base___traits_type<_Traits> = _Traits;
            pub type _Hashtable_base___hash_cached = root::__BindgenOpaqueArray<u8, 0usize>;
            pub type _Hashtable_base___hash_code_base = u8;
            pub type _Hashtable_base___hash_code = root::std::__detail::_Hashtable_base___hash_code_base;
            pub type _Hashtable_base__EqualEBO = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Hashtable_alloc {
                pub _address: u8,
            }
            pub type _Hashtable_alloc___ebo_node_alloc = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Hashtable_alloc___get_value_type {
                pub _address: u8,
            }
            pub type _Hashtable_alloc___node_type = root::__BindgenOpaqueArray<u8, 0usize>;
            pub type _Hashtable_alloc___node_alloc_type<_NodeAlloc> = _NodeAlloc;
            pub type _Hashtable_alloc___node_alloc_traits = root::__gnu_cxx::__alloc_traits;
            pub type _Hashtable_alloc___value_alloc_traits = root::__BindgenOpaqueArray<u8, 0usize>;
            pub type _Hashtable_alloc___node_ptr = *mut root::std::__detail::_Hashtable_alloc___node_type;
            pub type _Hashtable_alloc___node_base = root::std::__detail::_Hash_node_base;
            pub type _Hashtable_alloc___node_base_ptr = *mut root::std::__detail::_Hashtable_alloc___node_base;
            pub type _Hashtable_alloc___buckets_alloc_type = root::std::__alloc_rebind;
            pub type _Hashtable_alloc___buckets_alloc_traits = root::std::allocator_traits;
            pub type _Hashtable_alloc___buckets_ptr = *mut root::std::__detail::_Hashtable_alloc___node_base_ptr;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __and_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_same {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_cv {
            pub _address: u8,
        }
        pub type remove_cv_type<_Tp> = _Tp;
        pub type remove_cv_t = root::std::remove_cv;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_reference {
            pub _address: u8,
        }
        pub type remove_reference_type<_Tp> = _Tp;
        pub type remove_reference_t = root::std::remove_reference;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_unsigned {
            pub _address: u8,
        }
        pub type make_unsigned_type = u8;
        pub type enable_if_t = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __detector {
            pub _address: u8,
        }
        pub type __detector_type<_Default> = _Default;
        pub type __detector___is_detected = root::std::false_type;
        pub type __detected_or = root::std::__detector;
        pub type __detected_or_t = root::std::__detected_or;
        #[repr(C)]
        #[derive(Debug)]
        pub struct __pair_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct pair<_T1, _T2> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
            pub first: _T1,
            pub second: _T2,
        }
        pub type pair_first_type<_T1> = _T1;
        pub type pair_second_type<_T2> = _T2;
        pub type pair__PCCP = u8;
        pub type pair__PCCFP = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pair___zero_as_null_pointer_constant {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct input_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of input_iterator_tag"][::std::mem::size_of::<input_iterator_tag>() - 1usize];
            ["Alignment of input_iterator_tag"][::std::mem::align_of::<input_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct forward_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of forward_iterator_tag"][::std::mem::size_of::<forward_iterator_tag>() - 1usize];
            ["Alignment of forward_iterator_tag"][::std::mem::align_of::<forward_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bidirectional_iterator_tag {
            pub _address: u8,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of bidirectional_iterator_tag"][::std::mem::size_of::<bidirectional_iterator_tag>() - 1usize];
            ["Alignment of bidirectional_iterator_tag"][::std::mem::align_of::<bidirectional_iterator_tag>() - 1usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator {
            pub _address: u8,
        }
        pub type iterator_iterator_category<_Category> = _Category;
        pub type iterator_value_type<_Tp> = _Tp;
        pub type iterator_difference_type<_Distance> = _Distance;
        pub type iterator_pointer<_Pointer> = _Pointer;
        pub type iterator_reference<_Reference> = _Reference;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __iterator_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __undefined {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __get_first_arg {
            pub _address: u8,
        }
        pub type __get_first_arg_type = root::std::__undefined;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __replace_first_arg {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ptr_traits_elem {
            pub _address: u8,
        }
        pub type __ptr_traits_elem_t = root::std::__ptr_traits_elem;
        pub type __ptr_traits_ptr_to_pointer<_Ptr> = _Ptr;
        pub type __ptr_traits_ptr_to_element_type<_Elt> = _Elt;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __ptr_traits_impl {
            pub _address: u8,
        }
        pub type __ptr_traits_impl___diff_t = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __ptr_traits_impl___rebind = root::std::__type_identity;
        pub type __ptr_traits_impl_pointer<_Ptr> = _Ptr;
        pub type __ptr_traits_impl_element_type<_Elt> = _Elt;
        pub type __ptr_traits_impl_difference_type = root::std::__detected_or_t;
        pub type __ptr_traits_impl_rebind = root::std::__detected_or_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_traits {
            pub _address: u8,
        }
        pub type __ptr_rebind = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reverse_iterator<_Iterator> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
            pub current: _Iterator,
        }
        pub type reverse_iterator___traits_type = root::std::iterator_traits;
        pub type reverse_iterator_iterator_type<_Iterator> = _Iterator;
        pub type reverse_iterator_pointer = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_difference_type = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_reference = root::std::reverse_iterator___traits_type;
        pub type array_value_type<_Tp> = _Tp;
        pub type array_pointer<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_pointer<_Tp> = *const root::std::array_value_type<_Tp>;
        pub type array_reference<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_reference<_Tp> = *const root::std::array_value_type<_Tp>;
        pub type array_iterator<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_iterator<_Tp> = *const root::std::array_value_type<_Tp>;
        pub type array_size_type = usize;
        pub type array_difference_type = isize;
        pub type array_reverse_iterator<_Tp> = root::std::reverse_iterator<root::std::array_iterator<_Tp>>;
        pub type array_const_reverse_iterator<_Tp> = root::std::reverse_iterator<root::std::array_const_iterator<_Tp>>;
        #[repr(C)]
        #[derive(Debug)]
        pub struct __new_allocator {
            pub _address: u8,
        }
        pub type __new_allocator_value_type<_Tp> = _Tp;
        pub type __new_allocator_size_type = usize;
        pub type __new_allocator_difference_type = isize;
        pub type __new_allocator_pointer<_Tp> = *mut _Tp;
        pub type __new_allocator_const_pointer<_Tp> = *const _Tp;
        pub type __new_allocator_reference<_Tp> = *mut _Tp;
        pub type __new_allocator_const_reference<_Tp> = *const _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __new_allocator_rebind {
            pub _address: u8,
        }
        pub type __new_allocator_propagate_on_container_move_assignment = root::std::true_type;
        pub type __allocator_base = root::std::__new_allocator;
        #[repr(C)]
        #[derive(Debug)]
        pub struct allocator {
            pub _address: u8,
        }
        pub type allocator_value_type<_Tp> = _Tp;
        pub type allocator_size_type = usize;
        pub type allocator_difference_type = isize;
        pub type allocator_pointer<_Tp> = *mut _Tp;
        pub type allocator_const_pointer<_Tp> = *const _Tp;
        pub type allocator_reference<_Tp> = *mut _Tp;
        pub type allocator_const_reference<_Tp> = *const _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_rebind {
            pub _address: u8,
        }
        pub type allocator_rebind_other = root::std::allocator;
        pub type allocator_propagate_on_container_move_assignment = root::std::true_type;
        pub type allocator_is_always_equal = root::std::true_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_function {
            pub _address: u8,
        }
        pub type unary_function_argument_type<_Arg> = _Arg;
        pub type unary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_function {
            pub _address: u8,
        }
        pub type binary_function_first_argument_type<_Arg1> = _Arg1;
        pub type binary_function_second_argument_type<_Arg2> = _Arg2;
        pub type binary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select1st {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __allocator_traits_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __allocator_traits_base___rebind {
            pub _address: u8,
        }
        pub type __allocator_traits_base___pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___c_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___v_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___cv_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___pocca = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___pocma = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___pocs = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type __allocator_traits_base___equal = root::std::__type_identity;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of __allocator_traits_base"][::std::mem::size_of::<__allocator_traits_base>() - 1usize];
            ["Alignment of __allocator_traits_base"][::std::mem::align_of::<__allocator_traits_base>() - 1usize];
        };
        pub type __alloc_rebind = root::std::__allocator_traits_base;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits {
            pub _address: u8,
        }
        pub type allocator_traits_allocator_type<_Alloc> = _Alloc;
        pub type allocator_traits_value_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type allocator_traits_pointer = root::std::__detected_or_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Ptr {
            pub _address: u8,
        }
        pub type allocator_traits__Ptr_type = root::__BindgenOpaqueArray<u8, 0usize>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Diff {
            pub _address: u8,
        }
        pub type allocator_traits__Diff_type = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Size {
            pub _address: u8,
        }
        pub type allocator_traits_const_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type allocator_traits_void_pointer = root::std::allocator_traits__Ptr;
        pub type allocator_traits_const_void_pointer = root::std::allocator_traits__Ptr;
        pub type allocator_traits_difference_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type allocator_traits_size_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type allocator_traits_propagate_on_container_copy_assignment = root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_move_assignment = root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_swap = root::std::__detected_or_t;
        pub type allocator_traits_is_always_equal = root::std::__detected_or_t;
        pub type allocator_traits_rebind_alloc = root::std::__alloc_rebind;
        pub type allocator_traits_rebind_traits = root::std::allocator_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits___construct_helper {
            pub _address: u8,
        }
        pub type allocator_traits___construct_helper_type<_Alloc> = _Alloc;
        pub type allocator_traits___has_construct = root::std::allocator_traits___construct_helper;
        #[repr(C)]
        pub struct _Node_handle_common<_NodeAlloc> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeAlloc>>,
            pub _M_ptr: root::std::_Node_handle_common__AllocTraits,
            pub _M_alloc: root::std::_Node_handle_common__Optional_alloc<_NodeAlloc>,
        }
        pub type _Node_handle_common__AllocTraits = root::std::allocator_traits;
        pub type _Node_handle_common_allocator_type = root::std::__alloc_rebind;
        #[repr(C)]
        #[repr(align(1))]
        pub struct _Node_handle_common__Optional_alloc<_NodeAlloc> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeAlloc>>,
            pub _M_alloc: root::__BindgenUnionField<_NodeAlloc>,
            pub bindgen_union_field: [u8; 0usize],
        }
        #[repr(C)]
        pub struct _Node_handle<_NodeAlloc> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeAlloc>>,
            pub _base: root::std::_Node_handle_common<_NodeAlloc>,
            pub _M_pkey: root::std::_Node_handle___pointer,
            pub _M_pmapped: root::std::_Node_handle___pointer,
        }
        pub type _Node_handle_key_type<_Key> = _Key;
        pub type _Node_handle_mapped_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type _Node_handle__AllocTraits = root::std::allocator_traits;
        pub type _Node_handle___pointer = root::std::__ptr_rebind;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Node_insert_return<_Iterator, _NodeHandle> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeHandle>>,
            pub position: _Iterator,
            pub inserted: bool,
            pub node: _NodeHandle,
        }
        pub const _Rb_tree_color__S_red: root::std::_Rb_tree_color = 0;
        pub const _Rb_tree_color__S_black: root::std::_Rb_tree_color = 1;
        pub type _Rb_tree_color = ::std::os::raw::c_uint;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_node_base {
            pub _M_color: root::std::_Rb_tree_color,
            pub _M_parent: root::std::_Rb_tree_node_base__Base_ptr,
            pub _M_left: root::std::_Rb_tree_node_base__Base_ptr,
            pub _M_right: root::std::_Rb_tree_node_base__Base_ptr,
        }
        pub type _Rb_tree_node_base__Base_ptr = *mut root::std::_Rb_tree_node_base;
        pub type _Rb_tree_node_base__Const_Base_ptr = *const root::std::_Rb_tree_node_base;
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of _Rb_tree_node_base"][::std::mem::size_of::<_Rb_tree_node_base>() - 32usize];
            ["Alignment of _Rb_tree_node_base"][::std::mem::align_of::<_Rb_tree_node_base>() - 8usize];
            ["Offset of field: _Rb_tree_node_base::_M_color"]
                [::std::mem::offset_of!(_Rb_tree_node_base, _M_color) - 0usize];
            ["Offset of field: _Rb_tree_node_base::_M_parent"]
                [::std::mem::offset_of!(_Rb_tree_node_base, _M_parent) - 8usize];
            ["Offset of field: _Rb_tree_node_base::_M_left"]
                [::std::mem::offset_of!(_Rb_tree_node_base, _M_left) - 16usize];
            ["Offset of field: _Rb_tree_node_base::_M_right"]
                [::std::mem::offset_of!(_Rb_tree_node_base, _M_right) - 24usize];
        };
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_key_compare<_Key_compare> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Key_compare>>,
            pub _M_key_compare: _Key_compare,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_node {
            pub _base: root::std::_Rb_tree_node_base,
            pub _M_storage: root::__gnu_cxx::__aligned_membuf,
        }
        pub type _Rb_tree_node__Link_type = *mut root::std::_Rb_tree_node;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_iterator {
            pub _M_node: root::std::_Rb_tree_iterator__Base_ptr,
        }
        pub type _Rb_tree_iterator_value_type<_Tp> = _Tp;
        pub type _Rb_tree_iterator_reference<_Tp> = *mut _Tp;
        pub type _Rb_tree_iterator_pointer<_Tp> = *mut _Tp;
        pub type _Rb_tree_iterator_iterator_category = root::std::bidirectional_iterator_tag;
        pub type _Rb_tree_iterator_difference_type = isize;
        pub type _Rb_tree_iterator__Self = root::std::_Rb_tree_iterator;
        pub type _Rb_tree_iterator__Base_ptr = root::std::_Rb_tree_node_base__Base_ptr;
        pub type _Rb_tree_iterator__Link_type = *mut root::std::_Rb_tree_node;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_const_iterator {
            pub _M_node: root::std::_Rb_tree_const_iterator__Base_ptr,
        }
        pub type _Rb_tree_const_iterator_value_type<_Tp> = _Tp;
        pub type _Rb_tree_const_iterator_reference<_Tp> = *const _Tp;
        pub type _Rb_tree_const_iterator_pointer<_Tp> = *const _Tp;
        pub type _Rb_tree_const_iterator_iterator = root::std::_Rb_tree_iterator;
        pub type _Rb_tree_const_iterator_iterator_category = root::std::bidirectional_iterator_tag;
        pub type _Rb_tree_const_iterator_difference_type = isize;
        pub type _Rb_tree_const_iterator__Self = root::std::_Rb_tree_const_iterator;
        pub type _Rb_tree_const_iterator__Base_ptr = root::std::_Rb_tree_node_base__Const_Base_ptr;
        pub type _Rb_tree_const_iterator__Link_type = *const root::std::_Rb_tree_node;
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Rb_tree {
            pub _M_impl: u8,
        }
        pub type _Rb_tree__Node_allocator = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type _Rb_tree__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Rb_tree__Base_ptr = *mut root::std::_Rb_tree_node_base;
        pub type _Rb_tree__Const_Base_ptr = *const root::std::_Rb_tree_node_base;
        pub type _Rb_tree__Link_type = *mut root::std::_Rb_tree_node;
        pub type _Rb_tree__Const_Link_type = *const root::std::_Rb_tree_node;
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Rb_tree__Reuse_or_alloc_node {
            pub _M_root: root::std::_Rb_tree__Base_ptr,
            pub _M_nodes: root::std::_Rb_tree__Base_ptr,
            pub _M_t: *mut root::std::_Rb_tree,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree__Alloc_node {
            pub _M_t: *mut root::std::_Rb_tree,
        }
        pub type _Rb_tree_key_type<_Key> = _Key;
        pub type _Rb_tree_value_type<_Val> = _Val;
        pub type _Rb_tree_pointer<_Val> = *mut root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_const_pointer<_Val> = *const root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_reference<_Val> = *mut root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_const_reference<_Val> = *const root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_size_type = usize;
        pub type _Rb_tree_difference_type = isize;
        pub type _Rb_tree_allocator_type<_Alloc> = _Alloc;
        pub type _Rb_tree_reverse_iterator = root::std::reverse_iterator<root::std::_Rb_tree_iterator>;
        pub type _Rb_tree_const_reverse_iterator = root::std::reverse_iterator<root::std::_Rb_tree_const_iterator>;
        pub type _Rb_tree_node_type = root::std::_Node_handle<root::std::_Rb_tree__Node_allocator>;
        pub type _Rb_tree_insert_return_type = root::std::_Node_insert_return<_Iterator, _NodeHandle>;
        pub const _Rb_tree___as_lvalue: root::std::_Rb_tree__bindgen_ty_1 = 0;
        pub const _Rb_tree___as_rvalue: root::std::_Rb_tree__bindgen_ty_1 = 0;
        pub type _Rb_tree__bindgen_ty_1 = i32;
        pub type _Rb_tree___same_value_type = root::std::is_same;
        pub type _Rb_tree__Compatible_tree = root::std::_Rb_tree;
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Rb_tree__Auto_node {
            pub _M_t: *mut root::std::_Rb_tree,
            pub _M_node: root::std::_Rb_tree__Link_type,
        }
        pub type _Rb_tree__Rb_tree_impl__Base_key_compare<_Key_compare> = root::std::_Rb_tree_key_compare<_Key_compare>;
        #[repr(C)]
        pub struct map {
            pub _M_t: root::std::map__Rep_type,
        }
        pub type map_key_type<_Key> = _Key;
        pub type map_mapped_type<_Tp> = _Tp;
        pub type map_value_type<_Key, _Tp> = root::std::pair<_Key, _Tp>;
        pub type map_key_compare<_Compare> = _Compare;
        pub type map_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct map_value_compare<_Compare> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            pub comp: _Compare,
        }
        pub type map__Pair_alloc_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map__Rep_type = root::std::_Rb_tree;
        pub type map__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type map_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map_const_pointer = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map_reference = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map_const_reference = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map_iterator = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map_const_iterator = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map_size_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map_difference_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map_reverse_iterator = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map_const_reverse_iterator = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map_node_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type map_insert_return_type = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type string = root::std::basic_string<::std::os::raw::c_char>;
        pub type streamoff = ::std::os::raw::c_long;
        #[repr(C)]
        #[derive(Debug)]
        pub struct fpos<_StateT> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
            pub _M_off: root::std::streamoff,
            pub _M_state: _StateT,
        }
        pub type streampos = root::std::fpos<root::__mbstate_t>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct hash {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_string_view<_CharT> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            pub _M_len: usize,
            pub _M_str: *const _CharT,
        }
        pub type basic_string_view_traits_type<_Traits> = _Traits;
        pub type basic_string_view_value_type<_CharT> = _CharT;
        pub type basic_string_view_pointer<_CharT> = *mut root::std::basic_string_view_value_type<_CharT>;
        pub type basic_string_view_const_pointer<_CharT> = *const root::std::basic_string_view_value_type<_CharT>;
        pub type basic_string_view_reference<_CharT> = *mut root::std::basic_string_view_value_type<_CharT>;
        pub type basic_string_view_const_reference<_CharT> = *const root::std::basic_string_view_value_type<_CharT>;
        pub type basic_string_view_const_iterator<_CharT> = *const root::std::basic_string_view_value_type<_CharT>;
        pub type basic_string_view_iterator<_CharT> = root::std::basic_string_view_const_iterator<_CharT>;
        pub type basic_string_view_const_reverse_iterator<_CharT> =
            root::std::reverse_iterator<root::std::basic_string_view_const_iterator<_CharT>>;
        pub type basic_string_view_reverse_iterator<_CharT> =
            root::std::basic_string_view_const_reverse_iterator<_CharT>;
        pub type basic_string_view_size_type = usize;
        pub type basic_string_view_difference_type = isize;
        pub type _Hashtable_enable_default_ctor = u8;
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Hashtable<_RehashPolicy> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_RehashPolicy>>,
            pub _M_buckets: root::std::_Hashtable___buckets_ptr,
            pub _M_bucket_count: root::std::_Hashtable_size_type,
            pub _M_before_begin: root::std::_Hashtable___node_base,
            pub _M_element_count: root::std::_Hashtable_size_type,
            pub _M_rehash_policy: _RehashPolicy,
            pub _M_single_bucket: root::std::_Hashtable___node_base_ptr,
        }
        pub type _Hashtable___traits_type<_Traits> = _Traits;
        pub type _Hashtable___hash_cached = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type _Hashtable___constant_iterators = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type _Hashtable___node_type = u8;
        pub type _Hashtable___node_alloc_type = root::std::__alloc_rebind;
        pub type _Hashtable___hashtable_alloc = root::std::__detail::_Hashtable_alloc;
        pub type _Hashtable___node_value_type = u8;
        pub type _Hashtable___node_ptr = root::std::_Hashtable___hashtable_alloc;
        pub type _Hashtable___value_alloc_traits = root::std::_Hashtable___hashtable_alloc;
        pub type _Hashtable___node_alloc_traits = root::std::_Hashtable___hashtable_alloc;
        pub type _Hashtable___node_base = root::std::_Hashtable___hashtable_alloc;
        pub type _Hashtable___node_base_ptr = root::std::_Hashtable___hashtable_alloc;
        pub type _Hashtable___buckets_ptr = root::std::_Hashtable___hashtable_alloc;
        pub type _Hashtable___insert_base = u8;
        pub type _Hashtable___enable_default_ctor = root::std::_Hashtable_enable_default_ctor;
        pub type _Hashtable___rehash_guard_t<_RehashPolicy> = root::std::__detail::_RehashStateGuard<_RehashPolicy>;
        pub type _Hashtable_key_type<_Key> = _Key;
        pub type _Hashtable_value_type<_Value> = _Value;
        pub type _Hashtable_allocator_type<_Alloc> = _Alloc;
        pub type _Hashtable_key_equal<_Equal> = _Equal;
        pub type _Hashtable_pointer = root::std::_Hashtable___value_alloc_traits;
        pub type _Hashtable_const_pointer = root::std::_Hashtable___value_alloc_traits;
        pub type _Hashtable_reference<_Value> = *mut root::std::_Hashtable_value_type<_Value>;
        pub type _Hashtable_const_reference<_Value> = *const root::std::_Hashtable_value_type<_Value>;
        pub type _Hashtable_iterator = root::std::_Hashtable___insert_base;
        pub type _Hashtable_const_iterator = root::std::_Hashtable___insert_base;
        pub type _Hashtable_local_iterator = u8;
        pub type _Hashtable_const_local_iterator = u8;
        pub type _Hashtable___rehash_type<_RehashPolicy> = _RehashPolicy;
        pub type _Hashtable___unique_keys = root::__BindgenOpaqueArray<u8, 0usize>;
        pub type _Hashtable___hashtable_base = root::std::__detail::_Hashtable_base;
        pub type _Hashtable___hash_code_base = root::std::_Hashtable___hashtable_base;
        pub type _Hashtable___hash_code = root::std::_Hashtable___hashtable_base;
        pub type _Hashtable___ireturn_type = root::std::_Hashtable___insert_base;
        pub type _Hashtable___map_base = u8;
        pub type _Hashtable___rehash_base = root::std::__detail::_Rehash_base;
        pub type _Hashtable___eq_base = u8;
        pub type _Hashtable___reuse_or_alloc_node_gen_t = root::std::__detail::_ReuseOrAllocNode;
        pub type _Hashtable___alloc_node_gen_t = root::std::__detail::_AllocNode;
        pub type _Hashtable___node_builder_t = root::std::__detail::_NodeBuilder;
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Hashtable__Scoped_node {
            pub _M_h: *mut root::std::_Hashtable___hashtable_alloc,
            pub _M_node: root::std::_Hashtable___node_ptr,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Hashtable___hash_code_base_access {
            pub _address: u8,
        }
        pub type _Hashtable_size_type = root::std::_Hashtable___hashtable_base;
        pub type _Hashtable_difference_type = root::std::_Hashtable___hashtable_base;
        pub type _Hashtable_node_type = root::std::_Node_handle<root::std::_Hashtable___node_alloc_type>;
        pub type _Hashtable_insert_return_type =
            root::std::_Node_insert_return<root::std::_Hashtable_iterator, root::std::_Hashtable_node_type>;
        pub type __umap_hashtable = root::std::_Hashtable<_RehashPolicy>;
        #[repr(C)]
        #[derive(Debug)]
        pub struct unordered_map {
            pub _M_h: root::std::unordered_map__Hashtable,
        }
        pub type unordered_map__Hashtable = root::std::__umap_hashtable;
        pub type unordered_map_key_type = root::std::unordered_map__Hashtable;
        pub type unordered_map_value_type = root::std::unordered_map__Hashtable;
        pub type unordered_map_mapped_type = root::std::unordered_map__Hashtable;
        pub type unordered_map_hasher = root::std::unordered_map__Hashtable;
        pub type unordered_map_key_equal = root::std::unordered_map__Hashtable;
        pub type unordered_map_allocator_type = root::std::unordered_map__Hashtable;
        pub type unordered_map_pointer = root::std::unordered_map__Hashtable;
        pub type unordered_map_const_pointer = root::std::unordered_map__Hashtable;
        pub type unordered_map_reference = root::std::unordered_map__Hashtable;
        pub type unordered_map_const_reference = root::std::unordered_map__Hashtable;
        pub type unordered_map_iterator = root::std::unordered_map__Hashtable;
        pub type unordered_map_const_iterator = root::std::unordered_map__Hashtable;
        pub type unordered_map_local_iterator = root::std::unordered_map__Hashtable;
        pub type unordered_map_const_local_iterator = root::std::unordered_map__Hashtable;
        pub type unordered_map_size_type = root::std::unordered_map__Hashtable;
        pub type unordered_map_difference_type = root::std::unordered_map__Hashtable;
        pub type unordered_map_node_type = root::std::unordered_map__Hashtable;
        pub type unordered_map_insert_return_type = root::std::unordered_map__Hashtable;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __normal_iterator<_Iterator> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
            pub _M_current: _Iterator,
        }
        pub type __normal_iterator___traits_type = root::std::iterator_traits;
        pub type __normal_iterator___convertible_from = root::std::__enable_if_t;
        pub type __normal_iterator_iterator_type<_Iterator> = _Iterator;
        pub type __normal_iterator_iterator_category = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_value_type = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_difference_type = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_reference = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_pointer = root::__gnu_cxx::__normal_iterator___traits_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloc_traits {
            pub _address: u8,
        }
        pub type __alloc_traits_allocator_type<_Alloc> = _Alloc;
        pub type __alloc_traits__Base_type = root::std::allocator_traits;
        pub type __alloc_traits_value_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_const_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_size_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_difference_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_reference = *mut root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits_const_reference = *const root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits___is_custom_pointer = root::std::__and_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloc_traits_rebind {
            pub _address: u8,
        }
        pub type __alloc_traits_rebind_other = root::__gnu_cxx::__alloc_traits__Base_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_membuf {
            pub _M_storage: *mut ::std::os::raw::c_uchar,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_membuf__Tp2<_Tp> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
            pub _M_t: _Tp,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Char_types {
            pub _address: u8,
        }
        pub type _Char_types_int_type = ::std::os::raw::c_ulong;
        pub type _Char_types_pos_type = root::std::streampos;
        pub type _Char_types_off_type = root::std::streamoff;
        pub type _Char_types_state_type = root::__mbstate_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        pub type char_traits_char_type<_CharT> = _CharT;
        pub type char_traits_int_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_pos_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_off_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_state_type = root::__gnu_cxx::_Char_types;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __mbstate_t {
        pub __opaque1: ::std::os::raw::c_uint,
        pub __opaque2: ::std::os::raw::c_uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
        ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
        ["Offset of field: __mbstate_t::__opaque1"][::std::mem::offset_of!(__mbstate_t, __opaque1) - 0usize];
        ["Offset of field: __mbstate_t::__opaque2"][::std::mem::offset_of!(__mbstate_t, __opaque2) - 4usize];
    };
    pub mod __pstl {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod execution {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
    }
    pub mod libcamera {
        #[allow(unused_imports)]
        use self::super::super::root;
        unsafe extern "C" {
            #[link_name = "\u{1}_ZN9libcameraL14dynamic_extentE"]
            pub static dynamic_extent: usize;
        }
        pub type Span_element_type<T> = T;
        pub type Span_value_type = root::std::remove_cv_t;
        pub type Span_size_type = usize;
        pub type Span_difference_type = isize;
        pub type Span_pointer<T> = *mut T;
        pub type Span_const_pointer<T> = *const T;
        pub type Span_reference<T> = *mut T;
        pub type Span_const_reference<T> = *const T;
        pub type Span_iterator<T> = root::libcamera::Span_pointer<T>;
        pub type Span_const_iterator<T> = root::libcamera::Span_const_pointer<T>;
        pub type Span_reverse_iterator<T> = root::std::reverse_iterator<root::libcamera::Span_iterator<T>>;
        pub type Span_const_reverse_iterator<T> = root::std::reverse_iterator<root::libcamera::Span_const_iterator<T>>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Point {
            pub x: ::std::os::raw::c_int,
            pub y: ::std::os::raw::c_int,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of Point"][::std::mem::size_of::<Point>() - 8usize];
            ["Alignment of Point"][::std::mem::align_of::<Point>() - 4usize];
            ["Offset of field: Point::x"][::std::mem::offset_of!(Point, x) - 0usize];
            ["Offset of field: Point::y"][::std::mem::offset_of!(Point, y) - 4usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera5Point8toStringB5cxx11Ev"]
            pub fn Point_toString(this: *const root::libcamera::Point) -> root::std::string;
        }
        impl Point {
            #[inline]
            pub unsafe fn toString(&self) -> root::std::string {
                Point_toString(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Size {
            pub width: ::std::os::raw::c_uint,
            pub height: ::std::os::raw::c_uint,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of Size"][::std::mem::size_of::<Size>() - 8usize];
            ["Alignment of Size"][::std::mem::align_of::<Size>() - 4usize];
            ["Offset of field: Size::width"][::std::mem::offset_of!(Size, width) - 0usize];
            ["Offset of field: Size::height"][::std::mem::offset_of!(Size, height) - 4usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera4Size8toStringB5cxx11Ev"]
            pub fn Size_toString(this: *const root::libcamera::Size) -> root::std::string;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera4Size20boundedToAspectRatioERKS0_"]
            pub fn Size_boundedToAspectRatio(
                this: *const root::libcamera::Size,
                ratio: *const root::libcamera::Size,
            ) -> root::libcamera::Size;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera4Size21expandedToAspectRatioERKS0_"]
            pub fn Size_expandedToAspectRatio(
                this: *const root::libcamera::Size,
                ratio: *const root::libcamera::Size,
            ) -> root::libcamera::Size;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera4Size10centeredToERKNS_5PointE"]
            pub fn Size_centeredTo(
                this: *const root::libcamera::Size,
                center: *const root::libcamera::Point,
            ) -> root::libcamera::Rectangle;
        }
        impl Size {
            #[inline]
            pub unsafe fn toString(&self) -> root::std::string {
                Size_toString(self)
            }
            #[inline]
            pub unsafe fn boundedToAspectRatio(&self, ratio: *const root::libcamera::Size) -> root::libcamera::Size {
                Size_boundedToAspectRatio(self, ratio)
            }
            #[inline]
            pub unsafe fn expandedToAspectRatio(&self, ratio: *const root::libcamera::Size) -> root::libcamera::Size {
                Size_expandedToAspectRatio(self, ratio)
            }
            #[inline]
            pub unsafe fn centeredTo(&self, center: *const root::libcamera::Point) -> root::libcamera::Rectangle {
                Size_centeredTo(self, center)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Rectangle {
            pub x: ::std::os::raw::c_int,
            pub y: ::std::os::raw::c_int,
            pub width: ::std::os::raw::c_uint,
            pub height: ::std::os::raw::c_uint,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of Rectangle"][::std::mem::size_of::<Rectangle>() - 16usize];
            ["Alignment of Rectangle"][::std::mem::align_of::<Rectangle>() - 4usize];
            ["Offset of field: Rectangle::x"][::std::mem::offset_of!(Rectangle, x) - 0usize];
            ["Offset of field: Rectangle::y"][::std::mem::offset_of!(Rectangle, y) - 4usize];
            ["Offset of field: Rectangle::width"][::std::mem::offset_of!(Rectangle, width) - 8usize];
            ["Offset of field: Rectangle::height"][::std::mem::offset_of!(Rectangle, height) - 12usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera9Rectangle8toStringB5cxx11Ev"]
            pub fn Rectangle_toString(this: *const root::libcamera::Rectangle) -> root::std::string;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera9Rectangle6centerEv"]
            pub fn Rectangle_center(this: *const root::libcamera::Rectangle) -> root::libcamera::Point;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZN9libcamera9Rectangle7scaleByERKNS_4SizeES3_"]
            pub fn Rectangle_scaleBy(
                this: *mut root::libcamera::Rectangle,
                numerator: *const root::libcamera::Size,
                denominator: *const root::libcamera::Size,
            ) -> *mut root::libcamera::Rectangle;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZN9libcamera9Rectangle11translateByERKNS_5PointE"]
            pub fn Rectangle_translateBy(
                this: *mut root::libcamera::Rectangle,
                point: *const root::libcamera::Point,
            ) -> *mut root::libcamera::Rectangle;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera9Rectangle9boundedToERKS0_"]
            pub fn Rectangle_boundedTo(
                this: *const root::libcamera::Rectangle,
                bound: *const root::libcamera::Rectangle,
            ) -> root::libcamera::Rectangle;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera9Rectangle10enclosedInERKS0_"]
            pub fn Rectangle_enclosedIn(
                this: *const root::libcamera::Rectangle,
                boundary: *const root::libcamera::Rectangle,
            ) -> root::libcamera::Rectangle;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera9Rectangle8scaledByERKNS_4SizeES3_"]
            pub fn Rectangle_scaledBy(
                this: *const root::libcamera::Rectangle,
                numerator: *const root::libcamera::Size,
                denominator: *const root::libcamera::Size,
            ) -> root::libcamera::Rectangle;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera9Rectangle12translatedByERKNS_5PointE"]
            pub fn Rectangle_translatedBy(
                this: *const root::libcamera::Rectangle,
                point: *const root::libcamera::Point,
            ) -> root::libcamera::Rectangle;
        }
        impl Rectangle {
            #[inline]
            pub unsafe fn toString(&self) -> root::std::string {
                Rectangle_toString(self)
            }
            #[inline]
            pub unsafe fn center(&self) -> root::libcamera::Point {
                Rectangle_center(self)
            }
            #[inline]
            pub unsafe fn scaleBy(
                &mut self,
                numerator: *const root::libcamera::Size,
                denominator: *const root::libcamera::Size,
            ) -> *mut root::libcamera::Rectangle {
                Rectangle_scaleBy(self, numerator, denominator)
            }
            #[inline]
            pub unsafe fn translateBy(
                &mut self,
                point: *const root::libcamera::Point,
            ) -> *mut root::libcamera::Rectangle {
                Rectangle_translateBy(self, point)
            }
            #[inline]
            pub unsafe fn boundedTo(&self, bound: *const root::libcamera::Rectangle) -> root::libcamera::Rectangle {
                Rectangle_boundedTo(self, bound)
            }
            #[inline]
            pub unsafe fn enclosedIn(&self, boundary: *const root::libcamera::Rectangle) -> root::libcamera::Rectangle {
                Rectangle_enclosedIn(self, boundary)
            }
            #[inline]
            pub unsafe fn scaledBy(
                &self,
                numerator: *const root::libcamera::Size,
                denominator: *const root::libcamera::Size,
            ) -> root::libcamera::Rectangle {
                Rectangle_scaledBy(self, numerator, denominator)
            }
            #[inline]
            pub unsafe fn translatedBy(&self, point: *const root::libcamera::Point) -> root::libcamera::Rectangle {
                Rectangle_translatedBy(self, point)
            }
        }
        pub const ControlType_ControlTypeNone: root::libcamera::ControlType = 0;
        pub const ControlType_ControlTypeBool: root::libcamera::ControlType = 1;
        pub const ControlType_ControlTypeByte: root::libcamera::ControlType = 2;
        pub const ControlType_ControlTypeInteger32: root::libcamera::ControlType = 3;
        pub const ControlType_ControlTypeInteger64: root::libcamera::ControlType = 4;
        pub const ControlType_ControlTypeFloat: root::libcamera::ControlType = 5;
        pub const ControlType_ControlTypeString: root::libcamera::ControlType = 6;
        pub const ControlType_ControlTypeRectangle: root::libcamera::ControlType = 7;
        pub const ControlType_ControlTypeSize: root::libcamera::ControlType = 8;
        pub type ControlType = ::std::os::raw::c_uint;
        #[repr(C)]
        pub struct ControlValue {
            pub _bitfield_align_1: [u8; 0],
            pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 1usize]>,
            pub isArray_: bool,
            pub _bitfield_align_2: [u32; 0],
            pub _bitfield_2: root::__BindgenBitfieldUnit<[u8; 4usize]>,
            pub __bindgen_anon_1: root::libcamera::ControlValue__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union ControlValue__bindgen_ty_1 {
            pub value_: u64,
            pub storage_: *mut ::std::os::raw::c_void,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of ControlValue__bindgen_ty_1"][::std::mem::size_of::<ControlValue__bindgen_ty_1>() - 8usize];
            ["Alignment of ControlValue__bindgen_ty_1"][::std::mem::align_of::<ControlValue__bindgen_ty_1>() - 8usize];
            ["Offset of field: ControlValue__bindgen_ty_1::value_"]
                [::std::mem::offset_of!(ControlValue__bindgen_ty_1, value_) - 0usize];
            ["Offset of field: ControlValue__bindgen_ty_1::storage_"]
                [::std::mem::offset_of!(ControlValue__bindgen_ty_1, storage_) - 0usize];
        };
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of ControlValue"][::std::mem::size_of::<ControlValue>() - 16usize];
            ["Alignment of ControlValue"][::std::mem::align_of::<ControlValue>() - 8usize];
            ["Offset of field: ControlValue::isArray_"][::std::mem::offset_of!(ControlValue, isArray_) - 1usize];
        };
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera12ControlValue4dataEv"]
            pub fn ControlValue_data(
                this: *const root::libcamera::ControlValue,
            ) -> root::__BindgenOpaqueArray<u64, 2usize>;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZN9libcamera12ControlValue4dataEv"]
            pub fn ControlValue_data1(this: *mut root::libcamera::ControlValue) -> u8;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZNK9libcamera12ControlValue8toStringB5cxx11Ev"]
            pub fn ControlValue_toString(this: *const root::libcamera::ControlValue) -> root::std::string;
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZN9libcamera12ControlValue7reserveENS_11ControlTypeEbm"]
            pub fn ControlValue_reserve(
                this: *mut root::libcamera::ControlValue,
                type_: root::libcamera::ControlType,
                isArray: bool,
                numElements: usize,
            );
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZN9libcamera12ControlValueC1Ev"]
            pub fn ControlValue_ControlValue(this: *mut root::libcamera::ControlValue);
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZN9libcamera12ControlValueC1ERKS0_"]
            pub fn ControlValue_ControlValue1(
                this: *mut root::libcamera::ControlValue,
                other: *const root::libcamera::ControlValue,
            );
        }
        unsafe extern "C" {
            #[link_name = "\u{1}_ZN9libcamera12ControlValueD1Ev"]
            pub fn ControlValue_ControlValue_destructor(this: *mut root::libcamera::ControlValue);
        }
        impl ControlValue {
            #[inline]
            pub fn type_(&self) -> root::libcamera::ControlType {
                unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
            }
            #[inline]
            pub fn set_type_(&mut self, val: root::libcamera::ControlType) {
                unsafe {
                    let val: u32 = ::std::mem::transmute(val);
                    self._bitfield_1.set(0usize, 8u8, val as u64)
                }
            }
            #[inline]
            pub unsafe fn type__raw(this: *const Self) -> root::libcamera::ControlType {
                unsafe {
                    ::std::mem::transmute(<root::__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                        ::std::ptr::addr_of!((*this)._bitfield_1),
                        0usize,
                        8u8,
                    ) as u32)
                }
            }
            #[inline]
            pub unsafe fn set_type__raw(this: *mut Self, val: root::libcamera::ControlType) {
                unsafe {
                    let val: u32 = ::std::mem::transmute(val);
                    <root::__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                        ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                        0usize,
                        8u8,
                        val as u64,
                    )
                }
            }
            #[inline]
            pub fn new_bitfield_1(type_: root::libcamera::ControlType) -> root::__BindgenBitfieldUnit<[u8; 1usize]> {
                let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
                __bindgen_bitfield_unit.set(0usize, 8u8, {
                    let type_: u32 = unsafe { ::std::mem::transmute(type_) };
                    type_ as u64
                });
                __bindgen_bitfield_unit
            }
            #[inline]
            pub fn numElements_(&self) -> usize {
                unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 32u8) as u64) }
            }
            #[inline]
            pub fn set_numElements_(&mut self, val: usize) {
                unsafe {
                    let val: u64 = ::std::mem::transmute(val);
                    self._bitfield_2.set(0usize, 32u8, val as u64)
                }
            }
            #[inline]
            pub unsafe fn numElements__raw(this: *const Self) -> usize {
                unsafe {
                    ::std::mem::transmute(<root::__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                        ::std::ptr::addr_of!((*this)._bitfield_2),
                        0usize,
                        32u8,
                    ) as u64)
                }
            }
            #[inline]
            pub unsafe fn set_numElements__raw(this: *mut Self, val: usize) {
                unsafe {
                    let val: u64 = ::std::mem::transmute(val);
                    <root::__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                        ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                        0usize,
                        32u8,
                        val as u64,
                    )
                }
            }
            #[inline]
            pub fn new_bitfield_2(numElements_: usize) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
                let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
                __bindgen_bitfield_unit.set(0usize, 32u8, {
                    let numElements_: u64 = unsafe { ::std::mem::transmute(numElements_) };
                    numElements_ as u64
                });
                __bindgen_bitfield_unit
            }
            #[inline]
            pub unsafe fn data(&self) -> root::__BindgenOpaqueArray<u64, 2usize> {
                ControlValue_data(self)
            }
            #[inline]
            pub unsafe fn data1(&mut self) -> u8 {
                ControlValue_data1(self)
            }
            #[inline]
            pub unsafe fn toString(&self) -> root::std::string {
                ControlValue_toString(self)
            }
            #[inline]
            pub unsafe fn reserve(&mut self, type_: root::libcamera::ControlType, isArray: bool, numElements: usize) {
                ControlValue_reserve(self, type_, isArray, numElements)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                ControlValue_ControlValue(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(other: *const root::libcamera::ControlValue) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                ControlValue_ControlValue1(__bindgen_tmp.as_mut_ptr(), other);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                ControlValue_ControlValue_destructor(self)
            }
        }
        #[repr(C)]
        pub struct ControlId {
            pub id_: ::std::os::raw::c_uint,
            pub name_: root::std::string,
            pub type_: root::libcamera::ControlType,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of ControlId"][::std::mem::size_of::<ControlId>() - 48usize];
            ["Alignment of ControlId"][::std::mem::align_of::<ControlId>() - 8usize];
            ["Offset of field: ControlId::id_"][::std::mem::offset_of!(ControlId, id_) - 0usize];
            ["Offset of field: ControlId::name_"][::std::mem::offset_of!(ControlId, name_) - 8usize];
            ["Offset of field: ControlId::type_"][::std::mem::offset_of!(ControlId, type_) - 40usize];
        };
        #[repr(C)]
        pub struct Control {
            pub _base: root::libcamera::ControlId,
        }
        pub type Control_type<T> = T;
        pub type ControlIdMap = root::std::unordered_map;
        pub mod controls {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls8controlsE"]
                pub static controls: root::libcamera::ControlIdMap;
            }
            pub const controls_AE_ENABLE: root::libcamera::controls::_bindgen_ty_1 = 1;
            pub const controls_AE_LOCKED: root::libcamera::controls::_bindgen_ty_1 = 2;
            pub const controls_AE_METERING_MODE: root::libcamera::controls::_bindgen_ty_1 = 3;
            pub const controls_AE_CONSTRAINT_MODE: root::libcamera::controls::_bindgen_ty_1 = 4;
            pub const controls_AE_EXPOSURE_MODE: root::libcamera::controls::_bindgen_ty_1 = 5;
            pub const controls_EXPOSURE_VALUE: root::libcamera::controls::_bindgen_ty_1 = 6;
            pub const controls_EXPOSURE_TIME: root::libcamera::controls::_bindgen_ty_1 = 7;
            pub const controls_ANALOGUE_GAIN: root::libcamera::controls::_bindgen_ty_1 = 8;
            pub const controls_AE_FLICKER_MODE: root::libcamera::controls::_bindgen_ty_1 = 9;
            pub const controls_AE_FLICKER_PERIOD: root::libcamera::controls::_bindgen_ty_1 = 10;
            pub const controls_AE_FLICKER_DETECTED: root::libcamera::controls::_bindgen_ty_1 = 11;
            pub const controls_BRIGHTNESS: root::libcamera::controls::_bindgen_ty_1 = 12;
            pub const controls_CONTRAST: root::libcamera::controls::_bindgen_ty_1 = 13;
            pub const controls_LUX: root::libcamera::controls::_bindgen_ty_1 = 14;
            pub const controls_AWB_ENABLE: root::libcamera::controls::_bindgen_ty_1 = 15;
            pub const controls_AWB_MODE: root::libcamera::controls::_bindgen_ty_1 = 16;
            pub const controls_AWB_LOCKED: root::libcamera::controls::_bindgen_ty_1 = 17;
            pub const controls_COLOUR_GAINS: root::libcamera::controls::_bindgen_ty_1 = 18;
            pub const controls_COLOUR_TEMPERATURE: root::libcamera::controls::_bindgen_ty_1 = 19;
            pub const controls_SATURATION: root::libcamera::controls::_bindgen_ty_1 = 20;
            pub const controls_SENSOR_BLACK_LEVELS: root::libcamera::controls::_bindgen_ty_1 = 21;
            pub const controls_SHARPNESS: root::libcamera::controls::_bindgen_ty_1 = 22;
            pub const controls_FOCUS_FO_M: root::libcamera::controls::_bindgen_ty_1 = 23;
            pub const controls_COLOUR_CORRECTION_MATRIX: root::libcamera::controls::_bindgen_ty_1 = 24;
            pub const controls_SCALER_CROP: root::libcamera::controls::_bindgen_ty_1 = 25;
            pub const controls_DIGITAL_GAIN: root::libcamera::controls::_bindgen_ty_1 = 26;
            pub const controls_FRAME_DURATION: root::libcamera::controls::_bindgen_ty_1 = 27;
            pub const controls_FRAME_DURATION_LIMITS: root::libcamera::controls::_bindgen_ty_1 = 28;
            pub const controls_SENSOR_TEMPERATURE: root::libcamera::controls::_bindgen_ty_1 = 29;
            pub const controls_SENSOR_TIMESTAMP: root::libcamera::controls::_bindgen_ty_1 = 30;
            pub const controls_AF_MODE: root::libcamera::controls::_bindgen_ty_1 = 31;
            pub const controls_AF_RANGE: root::libcamera::controls::_bindgen_ty_1 = 32;
            pub const controls_AF_SPEED: root::libcamera::controls::_bindgen_ty_1 = 33;
            pub const controls_AF_METERING: root::libcamera::controls::_bindgen_ty_1 = 34;
            pub const controls_AF_WINDOWS: root::libcamera::controls::_bindgen_ty_1 = 35;
            pub const controls_AF_TRIGGER: root::libcamera::controls::_bindgen_ty_1 = 36;
            pub const controls_AF_PAUSE: root::libcamera::controls::_bindgen_ty_1 = 37;
            pub const controls_LENS_POSITION: root::libcamera::controls::_bindgen_ty_1 = 38;
            pub const controls_AF_STATE: root::libcamera::controls::_bindgen_ty_1 = 39;
            pub const controls_AF_PAUSE_STATE: root::libcamera::controls::_bindgen_ty_1 = 40;
            pub const controls_HDR_MODE: root::libcamera::controls::_bindgen_ty_1 = 41;
            pub const controls_HDR_CHANNEL: root::libcamera::controls::_bindgen_ty_1 = 42;
            pub const controls_GAMMA: root::libcamera::controls::_bindgen_ty_1 = 43;
            pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls8AeEnableE"]
                pub static AeEnable: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls8AeLockedE"]
                pub static AeLocked: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls20AeMeteringModeValuesE"]
                pub static AeMeteringModeValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls26AeMeteringModeNameValueMapB5cxx11E"]
                pub static AeMeteringModeNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls14AeMeteringModeE"]
                pub static AeMeteringMode: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls22AeConstraintModeValuesE"]
                pub static AeConstraintModeValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls28AeConstraintModeNameValueMapB5cxx11E"]
                pub static AeConstraintModeNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls16AeConstraintModeE"]
                pub static AeConstraintMode: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls20AeExposureModeValuesE"]
                pub static AeExposureModeValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls26AeExposureModeNameValueMapB5cxx11E"]
                pub static AeExposureModeNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls14AeExposureModeE"]
                pub static AeExposureMode: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls13ExposureValueE"]
                pub static ExposureValue: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls12ExposureTimeE"]
                pub static ExposureTime: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls12AnalogueGainE"]
                pub static AnalogueGain: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls19AeFlickerModeValuesE"]
                pub static AeFlickerModeValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls25AeFlickerModeNameValueMapB5cxx11E"]
                pub static AeFlickerModeNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls13AeFlickerModeE"]
                pub static AeFlickerMode: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls15AeFlickerPeriodE"]
                pub static AeFlickerPeriod: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls17AeFlickerDetectedE"]
                pub static AeFlickerDetected: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls10BrightnessE"]
                pub static Brightness: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls8ContrastE"]
                pub static Contrast: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls3LuxE"]
                pub static Lux: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls9AwbEnableE"]
                pub static AwbEnable: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls13AwbModeValuesE"]
                pub static AwbModeValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls19AwbModeNameValueMapB5cxx11E"]
                pub static AwbModeNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls7AwbModeE"]
                pub static AwbMode: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls9AwbLockedE"]
                pub static AwbLocked: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls11ColourGainsE"]
                pub static ColourGains: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls17ColourTemperatureE"]
                pub static ColourTemperature: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls10SaturationE"]
                pub static Saturation: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls17SensorBlackLevelsE"]
                pub static SensorBlackLevels: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls9SharpnessE"]
                pub static Sharpness: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls8FocusFoME"]
                pub static FocusFoM: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls22ColourCorrectionMatrixE"]
                pub static ColourCorrectionMatrix: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls10ScalerCropE"]
                pub static ScalerCrop: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls11DigitalGainE"]
                pub static DigitalGain: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls13FrameDurationE"]
                pub static FrameDuration: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls19FrameDurationLimitsE"]
                pub static FrameDurationLimits: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls17SensorTemperatureE"]
                pub static SensorTemperature: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls15SensorTimestampE"]
                pub static SensorTimestamp: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls12AfModeValuesE"]
                pub static AfModeValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls18AfModeNameValueMapB5cxx11E"]
                pub static AfModeNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls6AfModeE"]
                pub static AfMode: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls13AfRangeValuesE"]
                pub static AfRangeValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls19AfRangeNameValueMapB5cxx11E"]
                pub static AfRangeNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls7AfRangeE"]
                pub static AfRange: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls13AfSpeedValuesE"]
                pub static AfSpeedValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls19AfSpeedNameValueMapB5cxx11E"]
                pub static AfSpeedNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls7AfSpeedE"]
                pub static AfSpeed: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls16AfMeteringValuesE"]
                pub static AfMeteringValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls22AfMeteringNameValueMapB5cxx11E"]
                pub static AfMeteringNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls10AfMeteringE"]
                pub static AfMetering: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls9AfWindowsE"]
                pub static AfWindows: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls15AfTriggerValuesE"]
                pub static AfTriggerValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls21AfTriggerNameValueMapB5cxx11E"]
                pub static AfTriggerNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls9AfTriggerE"]
                pub static AfTrigger: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls13AfPauseValuesE"]
                pub static AfPauseValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls19AfPauseNameValueMapB5cxx11E"]
                pub static AfPauseNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls7AfPauseE"]
                pub static AfPause: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls12LensPositionE"]
                pub static LensPosition: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls13AfStateValuesE"]
                pub static AfStateValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls19AfStateNameValueMapB5cxx11E"]
                pub static AfStateNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls7AfStateE"]
                pub static AfState: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls18AfPauseStateValuesE"]
                pub static AfPauseStateValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls24AfPauseStateNameValueMapB5cxx11E"]
                pub static AfPauseStateNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls12AfPauseStateE"]
                pub static AfPauseState: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls13HdrModeValuesE"]
                pub static HdrModeValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls19HdrModeNameValueMapB5cxx11E"]
                pub static HdrModeNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls7HdrModeE"]
                pub static HdrMode: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls16HdrChannelValuesE"]
                pub static HdrChannelValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls22HdrChannelNameValueMapB5cxx11E"]
                pub static HdrChannelNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls10HdrChannelE"]
                pub static HdrChannel: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera8controls5GammaE"]
                pub static Gamma: root::libcamera::Control;
            }
            pub mod draft {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                pub const draft_AE_PRECAPTURE_TRIGGER: root::libcamera::controls::draft::_bindgen_ty_1 = 10001;
                pub const draft_NOISE_REDUCTION_MODE: root::libcamera::controls::draft::_bindgen_ty_1 = 10002;
                pub const draft_COLOR_CORRECTION_ABERRATION_MODE: root::libcamera::controls::draft::_bindgen_ty_1 =
                    10003;
                pub const draft_AE_STATE: root::libcamera::controls::draft::_bindgen_ty_1 = 10004;
                pub const draft_AWB_STATE: root::libcamera::controls::draft::_bindgen_ty_1 = 10005;
                pub const draft_SENSOR_ROLLING_SHUTTER_SKEW: root::libcamera::controls::draft::_bindgen_ty_1 = 10006;
                pub const draft_LENS_SHADING_MAP_MODE: root::libcamera::controls::draft::_bindgen_ty_1 = 10007;
                pub const draft_PIPELINE_DEPTH: root::libcamera::controls::draft::_bindgen_ty_1 = 10008;
                pub const draft_MAX_LATENCY: root::libcamera::controls::draft::_bindgen_ty_1 = 10009;
                pub const draft_TEST_PATTERN_MODE: root::libcamera::controls::draft::_bindgen_ty_1 = 10010;
                pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft25AePrecaptureTriggerValuesE"]
                    pub static AePrecaptureTriggerValues: u8;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft31AePrecaptureTriggerNameValueMapB5cxx11E"]
                    pub static AePrecaptureTriggerNameValueMap: root::std::map;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft19AePrecaptureTriggerE"]
                    pub static AePrecaptureTrigger: root::libcamera::Control;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft24NoiseReductionModeValuesE"]
                    pub static NoiseReductionModeValues: u8;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft30NoiseReductionModeNameValueMapB5cxx11E"]
                    pub static NoiseReductionModeNameValueMap: root::std::map;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft18NoiseReductionModeE"]
                    pub static NoiseReductionMode: root::libcamera::Control;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft35ColorCorrectionAberrationModeValuesE"]
                    pub static ColorCorrectionAberrationModeValues: u8;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft41ColorCorrectionAberrationModeNameValueMapB5cxx11E"]
                    pub static ColorCorrectionAberrationModeNameValueMap: root::std::map;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft29ColorCorrectionAberrationModeE"]
                    pub static ColorCorrectionAberrationMode: root::libcamera::Control;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft13AeStateValuesE"]
                    pub static AeStateValues: u8;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft19AeStateNameValueMapB5cxx11E"]
                    pub static AeStateNameValueMap: root::std::map;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft7AeStateE"]
                    pub static AeState: root::libcamera::Control;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft14AwbStateValuesE"]
                    pub static AwbStateValues: u8;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft20AwbStateNameValueMapB5cxx11E"]
                    pub static AwbStateNameValueMap: root::std::map;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft8AwbStateE"]
                    pub static AwbState: root::libcamera::Control;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft24SensorRollingShutterSkewE"]
                    pub static SensorRollingShutterSkew: root::libcamera::Control;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft24LensShadingMapModeValuesE"]
                    pub static LensShadingMapModeValues: u8;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft30LensShadingMapModeNameValueMapB5cxx11E"]
                    pub static LensShadingMapModeNameValueMap: root::std::map;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft18LensShadingMapModeE"]
                    pub static LensShadingMapMode: root::libcamera::Control;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft13PipelineDepthE"]
                    pub static PipelineDepth: root::libcamera::Control;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft10MaxLatencyE"]
                    pub static MaxLatency: root::libcamera::Control;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft21TestPatternModeValuesE"]
                    pub static TestPatternModeValues: u8;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft27TestPatternModeNameValueMapB5cxx11E"]
                    pub static TestPatternModeNameValueMap: root::std::map;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera8controls5draft15TestPatternModeE"]
                    pub static TestPatternMode: root::libcamera::Control;
                }
            }
        }
        pub mod properties {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties10propertiesE"]
                pub static properties: root::libcamera::ControlIdMap;
            }
            pub const properties_LOCATION: root::libcamera::properties::_bindgen_ty_1 = 1;
            pub const properties_ROTATION: root::libcamera::properties::_bindgen_ty_1 = 2;
            pub const properties_MODEL: root::libcamera::properties::_bindgen_ty_1 = 3;
            pub const properties_UNIT_CELL_SIZE: root::libcamera::properties::_bindgen_ty_1 = 4;
            pub const properties_PIXEL_ARRAY_SIZE: root::libcamera::properties::_bindgen_ty_1 = 5;
            pub const properties_PIXEL_ARRAY_OPTICAL_BLACK_RECTANGLES: root::libcamera::properties::_bindgen_ty_1 = 6;
            pub const properties_PIXEL_ARRAY_ACTIVE_AREAS: root::libcamera::properties::_bindgen_ty_1 = 7;
            pub const properties_SCALER_CROP_MAXIMUM: root::libcamera::properties::_bindgen_ty_1 = 8;
            pub const properties_SENSOR_SENSITIVITY: root::libcamera::properties::_bindgen_ty_1 = 9;
            pub const properties_SYSTEM_DEVICES: root::libcamera::properties::_bindgen_ty_1 = 10;
            pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties14LocationValuesE"]
                pub static LocationValues: u8;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties20LocationNameValueMapB5cxx11E"]
                pub static LocationNameValueMap: root::std::map;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties8LocationE"]
                pub static Location: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties8RotationE"]
                pub static Rotation: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties5ModelB5cxx11E"]
                pub static Model: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties12UnitCellSizeE"]
                pub static UnitCellSize: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties14PixelArraySizeE"]
                pub static PixelArraySize: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties32PixelArrayOpticalBlackRectanglesE"]
                pub static PixelArrayOpticalBlackRectangles: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties21PixelArrayActiveAreasE"]
                pub static PixelArrayActiveAreas: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties17ScalerCropMaximumE"]
                pub static ScalerCropMaximum: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties17SensorSensitivityE"]
                pub static SensorSensitivity: root::libcamera::Control;
            }
            unsafe extern "C" {
                #[link_name = "\u{1}_ZN9libcamera10properties13SystemDevicesE"]
                pub static SystemDevices: root::libcamera::Control;
            }
            pub mod draft {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                pub const draft_COLOR_FILTER_ARRANGEMENT: root::libcamera::properties::draft::_bindgen_ty_1 = 10001;
                pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera10properties5draft28ColorFilterArrangementValuesE"]
                    pub static ColorFilterArrangementValues: u8;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera10properties5draft34ColorFilterArrangementNameValueMapB5cxx11E"]
                    pub static ColorFilterArrangementNameValueMap: root::std::map;
                }
                unsafe extern "C" {
                    #[link_name = "\u{1}_ZN9libcamera10properties5draft22ColorFilterArrangementE"]
                    pub static ColorFilterArrangement: root::libcamera::Control;
                }
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_2 {
        pub _address: u8,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: hash_open0_unsigned_int_close0"]
            [::std::mem::size_of::<root::std::hash>() - 1usize];
        ["Align of template specialization: hash_open0_unsigned_int_close0"]
            [::std::mem::align_of::<root::std::hash>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: equal_to_open0_unsigned_int_close0"]
            [::std::mem::size_of::<root::std::equal_to>() - 1usize];
        ["Align of template specialization: equal_to_open0_unsigned_int_close0"]
            [::std::mem::align_of::<root::std::equal_to>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
        ["Align of template specialization: basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < root :: std :: basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: char_traits_open0_char_close0"]
            [::std::mem::size_of::<root::std::char_traits>() - 1usize];
        ["Align of template specialization: char_traits_open0_char_close0"]
            [::std::mem::align_of::<root::std::char_traits>() - 1usize];
    };
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of template specialization: allocator_open0_char_close0"]
            [::std::mem::size_of::<root::std::allocator>() - 1usize];
        ["Align of template specialization: allocator_open0_char_close0"]
            [::std::mem::align_of::<root::std::allocator>() - 1usize];
    };
}
