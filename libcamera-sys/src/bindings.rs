/* automatically generated by rust-bindgen 0.71.1 */

pub const LIBCAMERA_VERSION_MAJOR: u32 = 0;
pub const LIBCAMERA_VERSION_MINOR: u32 = 4;
pub const LIBCAMERA_VERSION_PATCH: u32 = 0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_control_value {
    _unused: [u8; 0],
}
pub type libcamera_control_value_t = libcamera_control_value;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_control_list {
    _unused: [u8; 0],
}
pub type libcamera_control_list_t = libcamera_control_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_control_list_iter {
    _unused: [u8; 0],
}
pub type libcamera_control_list_iter_t = libcamera_control_list_iter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_control_info_map {
    _unused: [u8; 0],
}
pub type libcamera_control_info_map_t = libcamera_control_info_map;
pub mod libcamera_control_id {
    pub type Type = ::std::os::raw::c_uint;
    pub const libcamera_control_id_DUMMY: Type = 0;
}
pub mod libcamera_property_id {
    pub type Type = ::std::os::raw::c_uint;
    pub const libcamera_property_id_DUMMY: Type = 0;
}
pub mod libcamera_control_type {
    pub type Type = ::std::os::raw::c_uint;
    pub const LIBCAMERA_CONTROL_TYPE_NONE: Type = 0;
    pub const LIBCAMERA_CONTROL_TYPE_BOOL: Type = 1;
    pub const LIBCAMERA_CONTROL_TYPE_BYTE: Type = 2;
    pub const LIBCAMERA_CONTROL_TYPE_INT32: Type = 3;
    pub const LIBCAMERA_CONTROL_TYPE_INT64: Type = 4;
    pub const LIBCAMERA_CONTROL_TYPE_FLOAT: Type = 5;
    pub const LIBCAMERA_CONTROL_TYPE_STRING: Type = 6;
    pub const LIBCAMERA_CONTROL_TYPE_RECTANGLE: Type = 7;
    pub const LIBCAMERA_CONTROL_TYPE_SIZE: Type = 8;
}
unsafe extern "C" {
    pub fn libcamera_control_name(id: libcamera_control_id::Type) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn libcamera_control_type(id: libcamera_control_id::Type) -> libcamera_control_type::Type;
}
unsafe extern "C" {
    pub fn libcamera_property_name(id: libcamera_property_id::Type) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn libcamera_property_type(id: libcamera_property_id::Type) -> libcamera_control_type::Type;
}
unsafe extern "C" {
    pub fn libcamera_control_list_create() -> *mut libcamera_control_list_t;
}
unsafe extern "C" {
    pub fn libcamera_control_list_destroy(list: *mut libcamera_control_list_t);
}
unsafe extern "C" {
    pub fn libcamera_control_list_get(
        list: *mut libcamera_control_list_t,
        id: libcamera_property_id::Type,
    ) -> *const libcamera_control_value_t;
}
unsafe extern "C" {
    pub fn libcamera_control_list_set(
        list: *mut libcamera_control_list_t,
        id: libcamera_property_id::Type,
        val: *const libcamera_control_value_t,
    );
}
unsafe extern "C" {
    pub fn libcamera_control_list_iter(list: *mut libcamera_control_list_t) -> *mut libcamera_control_list_iter_t;
}
unsafe extern "C" {
    pub fn libcamera_control_list_iter_destroy(iter: *mut libcamera_control_list_iter_t);
}
unsafe extern "C" {
    pub fn libcamera_control_list_iter_end(iter: *const libcamera_control_list_iter_t) -> bool;
}
unsafe extern "C" {
    pub fn libcamera_control_list_iter_next(iter: *mut libcamera_control_list_iter_t);
}
unsafe extern "C" {
    pub fn libcamera_control_list_iter_id(iter: *mut libcamera_control_list_iter_t) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn libcamera_control_list_iter_value(
        iter: *mut libcamera_control_list_iter_t,
    ) -> *const libcamera_control_value_t;
}
unsafe extern "C" {
    pub fn libcamera_control_value_create() -> *mut libcamera_control_value_t;
}
unsafe extern "C" {
    pub fn libcamera_control_value_destroy(val: *mut libcamera_control_value_t);
}
unsafe extern "C" {
    pub fn libcamera_control_value_type(val: *const libcamera_control_value_t) -> libcamera_control_type::Type;
}
unsafe extern "C" {
    pub fn libcamera_control_value_is_none(val: *const libcamera_control_value_t) -> bool;
}
unsafe extern "C" {
    pub fn libcamera_control_value_is_array(val: *const libcamera_control_value_t) -> bool;
}
unsafe extern "C" {
    pub fn libcamera_control_value_num_elements(val: *const libcamera_control_value_t) -> usize;
}
unsafe extern "C" {
    pub fn libcamera_control_value_get(val: *const libcamera_control_value_t) -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn libcamera_control_value_set(
        val: *mut libcamera_control_value_t,
        type_: libcamera_control_type::Type,
        data: *const ::std::os::raw::c_void,
        is_array: bool,
        num_elements: usize,
    );
}
pub mod libcamera_frame_metadata_status {
    pub type Type = ::std::os::raw::c_uint;
    pub const LIBCAMERA_FRAME_METADATA_STATUS_SUCCESS: Type = 0;
    pub const LIBCAMERA_FRAME_METADATA_STATUS_ERROR: Type = 1;
    pub const LIBCAMERA_FRAME_METADATA_STATUS_CANCELLED: Type = 2;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_frame_metadata_plane {
    pub bytes_used: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libcamera_frame_metadata_plane"][::std::mem::size_of::<libcamera_frame_metadata_plane>() - 4usize];
    ["Alignment of libcamera_frame_metadata_plane"][::std::mem::align_of::<libcamera_frame_metadata_plane>() - 4usize];
    ["Offset of field: libcamera_frame_metadata_plane::bytes_used"]
        [::std::mem::offset_of!(libcamera_frame_metadata_plane, bytes_used) - 0usize];
};
pub use self::libcamera_frame_metadata_status::Type as libcamera_frame_metadata_status_t;
pub type libcamera_frame_metadata_plane_t = libcamera_frame_metadata_plane;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_frame_metadata_planes {
    _unused: [u8; 0],
}
pub type libcamera_frame_metadata_planes_t = libcamera_frame_metadata_planes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_frame_metadata {
    _unused: [u8; 0],
}
pub type libcamera_frame_metadata_t = libcamera_frame_metadata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_framebuffer_plane {
    _unused: [u8; 0],
}
pub type libcamera_framebuffer_plane_t = libcamera_framebuffer_plane;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_framebuffer_planes {
    _unused: [u8; 0],
}
pub type libcamera_framebuffer_planes_t = libcamera_framebuffer_planes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_framebuffer {
    _unused: [u8; 0],
}
pub type libcamera_framebuffer_t = libcamera_framebuffer;
unsafe extern "C" {
    pub fn libcamera_frame_metadata_status(
        metadata: *const libcamera_frame_metadata_t,
    ) -> libcamera_frame_metadata_status_t;
}
unsafe extern "C" {
    pub fn libcamera_frame_metadata_sequence(metadata: *const libcamera_frame_metadata_t) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn libcamera_frame_metadata_timestamp(metadata: *const libcamera_frame_metadata_t) -> u64;
}
unsafe extern "C" {
    pub fn libcamera_frame_metadata_planes(
        metadata: *mut libcamera_frame_metadata_t,
    ) -> *mut libcamera_frame_metadata_planes_t;
}
unsafe extern "C" {
    pub fn libcamera_frame_metadata_planes_destroy(planes: *mut libcamera_frame_metadata_planes_t);
}
unsafe extern "C" {
    pub fn libcamera_frame_metadata_planes_size(planes: *const libcamera_frame_metadata_planes_t) -> usize;
}
unsafe extern "C" {
    pub fn libcamera_frame_metadata_planes_at(
        planes: *mut libcamera_frame_metadata_planes_t,
        index: usize,
    ) -> *mut libcamera_frame_metadata_plane_t;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_planes(
        framebuffer: *const libcamera_framebuffer_t,
    ) -> *const libcamera_framebuffer_planes_t;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_metadata(
        framebuffer: *const libcamera_framebuffer_t,
    ) -> *const libcamera_frame_metadata_t;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_cookie(framebuffer: *const libcamera_framebuffer_t) -> u64;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_plane_fd(plane: *mut libcamera_framebuffer_plane_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_plane_offset(plane: *const libcamera_framebuffer_plane_t) -> usize;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_plane_offset_valid(plane: *const libcamera_framebuffer_plane_t) -> bool;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_plane_length(plane: *const libcamera_framebuffer_plane_t) -> usize;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_planes_size(planes: *const libcamera_framebuffer_planes_t) -> usize;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_planes_at(
        planes: *mut libcamera_framebuffer_planes_t,
        index: usize,
    ) -> *mut libcamera_framebuffer_plane_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_point {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libcamera_point"][::std::mem::size_of::<libcamera_point>() - 8usize];
    ["Alignment of libcamera_point"][::std::mem::align_of::<libcamera_point>() - 4usize];
    ["Offset of field: libcamera_point::x"][::std::mem::offset_of!(libcamera_point, x) - 0usize];
    ["Offset of field: libcamera_point::y"][::std::mem::offset_of!(libcamera_point, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_size {
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libcamera_size"][::std::mem::size_of::<libcamera_size>() - 8usize];
    ["Alignment of libcamera_size"][::std::mem::align_of::<libcamera_size>() - 4usize];
    ["Offset of field: libcamera_size::width"][::std::mem::offset_of!(libcamera_size, width) - 0usize];
    ["Offset of field: libcamera_size::height"][::std::mem::offset_of!(libcamera_size, height) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_size_range {
    pub min: libcamera_size,
    pub max: libcamera_size,
    pub hStep: ::std::os::raw::c_uint,
    pub vStep: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libcamera_size_range"][::std::mem::size_of::<libcamera_size_range>() - 24usize];
    ["Alignment of libcamera_size_range"][::std::mem::align_of::<libcamera_size_range>() - 4usize];
    ["Offset of field: libcamera_size_range::min"][::std::mem::offset_of!(libcamera_size_range, min) - 0usize];
    ["Offset of field: libcamera_size_range::max"][::std::mem::offset_of!(libcamera_size_range, max) - 8usize];
    ["Offset of field: libcamera_size_range::hStep"][::std::mem::offset_of!(libcamera_size_range, hStep) - 16usize];
    ["Offset of field: libcamera_size_range::vStep"][::std::mem::offset_of!(libcamera_size_range, vStep) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_rectangle {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libcamera_rectangle"][::std::mem::size_of::<libcamera_rectangle>() - 16usize];
    ["Alignment of libcamera_rectangle"][::std::mem::align_of::<libcamera_rectangle>() - 4usize];
    ["Offset of field: libcamera_rectangle::x"][::std::mem::offset_of!(libcamera_rectangle, x) - 0usize];
    ["Offset of field: libcamera_rectangle::y"][::std::mem::offset_of!(libcamera_rectangle, y) - 4usize];
    ["Offset of field: libcamera_rectangle::width"][::std::mem::offset_of!(libcamera_rectangle, width) - 8usize];
    ["Offset of field: libcamera_rectangle::height"][::std::mem::offset_of!(libcamera_rectangle, height) - 12usize];
};
pub type libcamera_point_t = libcamera_point;
pub type libcamera_size_t = libcamera_size;
pub type libcamera_size_range_t = libcamera_size_range;
pub type libcamera_rectangle_t = libcamera_rectangle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_sizes {
    _unused: [u8; 0],
}
pub type libcamera_sizes_t = libcamera_sizes;
unsafe extern "C" {
    pub fn libcamera_sizes_destroy(sizes: *mut libcamera_sizes_t);
}
unsafe extern "C" {
    pub fn libcamera_sizes_size(sizes: *const libcamera_sizes_t) -> usize;
}
unsafe extern "C" {
    pub fn libcamera_sizes_at(sizes: *const libcamera_sizes_t, index: usize) -> *const libcamera_size_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_pixel_format {
    pub fourcc: u32,
    pub modifier: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libcamera_pixel_format"][::std::mem::size_of::<libcamera_pixel_format>() - 16usize];
    ["Alignment of libcamera_pixel_format"][::std::mem::align_of::<libcamera_pixel_format>() - 8usize];
    ["Offset of field: libcamera_pixel_format::fourcc"]
        [::std::mem::offset_of!(libcamera_pixel_format, fourcc) - 0usize];
    ["Offset of field: libcamera_pixel_format::modifier"]
        [::std::mem::offset_of!(libcamera_pixel_format, modifier) - 8usize];
};
pub type libcamera_pixel_format_t = libcamera_pixel_format;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_pixel_formats {
    _unused: [u8; 0],
}
pub type libcamera_pixel_formats_t = libcamera_pixel_formats;
unsafe extern "C" {
    #[doc = " @brief Converts pixel format to a human readable string representation\n @param format libcamera PixelFormat structure\n @return A heap allocated null-terminated string, that has to be deallocated with free()"]
    pub fn libcamera_pixel_format_str(format: *const libcamera_pixel_format_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn libcamera_pixel_formats_destroy(formats: *mut libcamera_pixel_formats_t);
}
unsafe extern "C" {
    pub fn libcamera_pixel_formats_size(formats: *const libcamera_pixel_formats_t) -> usize;
}
unsafe extern "C" {
    pub fn libcamera_pixel_formats_get(
        formats: *const libcamera_pixel_formats_t,
        index: usize,
    ) -> libcamera_pixel_format_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_stream_configuration {
    pub pixel_format: libcamera_pixel_format_t,
    pub size: libcamera_size_t,
    pub stride: ::std::os::raw::c_uint,
    pub frame_size: ::std::os::raw::c_uint,
    pub buffer_count: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libcamera_stream_configuration"][::std::mem::size_of::<libcamera_stream_configuration>() - 40usize];
    ["Alignment of libcamera_stream_configuration"][::std::mem::align_of::<libcamera_stream_configuration>() - 8usize];
    ["Offset of field: libcamera_stream_configuration::pixel_format"]
        [::std::mem::offset_of!(libcamera_stream_configuration, pixel_format) - 0usize];
    ["Offset of field: libcamera_stream_configuration::size"]
        [::std::mem::offset_of!(libcamera_stream_configuration, size) - 16usize];
    ["Offset of field: libcamera_stream_configuration::stride"]
        [::std::mem::offset_of!(libcamera_stream_configuration, stride) - 24usize];
    ["Offset of field: libcamera_stream_configuration::frame_size"]
        [::std::mem::offset_of!(libcamera_stream_configuration, frame_size) - 28usize];
    ["Offset of field: libcamera_stream_configuration::buffer_count"]
        [::std::mem::offset_of!(libcamera_stream_configuration, buffer_count) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_stream_formats {
    _unused: [u8; 0],
}
pub type libcamera_stream_formats_t = libcamera_stream_formats;
pub type libcamera_stream_configuration_t = libcamera_stream_configuration;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_stream {
    _unused: [u8; 0],
}
pub type libcamera_stream_t = libcamera_stream;
pub mod libcamera_stream_role {
    pub type Type = ::std::os::raw::c_uint;
    pub const LIBCAMERA_STREAM_ROLE_RAW: Type = 0;
    pub const LIBCAMERA_STREAM_ROLE_STILL_CAPTURE: Type = 1;
    pub const LIBCAMERA_STREAM_ROLE_VIDEO_RECORDING: Type = 2;
    pub const LIBCAMERA_STREAM_ROLE_VIEW_FINDER: Type = 3;
}
unsafe extern "C" {
    pub fn libcamera_stream_formats_pixel_formats(
        formats: *const libcamera_stream_formats_t,
    ) -> *mut libcamera_pixel_formats_t;
}
unsafe extern "C" {
    pub fn libcamera_stream_formats_sizes(
        formats: *const libcamera_stream_formats_t,
        pixel_format: *const libcamera_pixel_format_t,
    ) -> *mut libcamera_sizes_t;
}
unsafe extern "C" {
    pub fn libcamera_stream_formats_range(
        formats: *const libcamera_stream_formats_t,
        pixel_format: *const libcamera_pixel_format_t,
    ) -> libcamera_size_range_t;
}
unsafe extern "C" {
    pub fn libcamera_stream_configuration_formats(
        config: *const libcamera_stream_configuration_t,
    ) -> *const libcamera_stream_formats_t;
}
unsafe extern "C" {
    pub fn libcamera_stream_configuration_stream(
        config: *const libcamera_stream_configuration_t,
    ) -> *mut libcamera_stream_t;
}
pub mod libcamera_request_status {
    pub type Type = ::std::os::raw::c_uint;
    pub const LIBCAMERA_REQUEST_STATUS_PENDING: Type = 0;
    pub const LIBCAMERA_REQUEST_STATUS_COMPLETE: Type = 1;
    pub const LIBCAMERA_REQUEST_STATUS_CANCELLED: Type = 2;
}
pub mod libcamera_request_reuse_flag {
    pub type Type = ::std::os::raw::c_uint;
    pub const LIBCAMERA_REQUEST_REUSE_FLAG_DEFAULT: Type = 0;
    pub const LIBCAMERA_REQUEST_REUSE_FLAG_REUSE_BUFFERS: Type = 1;
}
pub use self::libcamera_request_reuse_flag::Type as libcamera_request_reuse_flag_t;
pub use self::libcamera_request_status::Type as libcamera_request_status_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_request {
    _unused: [u8; 0],
}
pub type libcamera_request_t = libcamera_request;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_request_buffer_map {
    _unused: [u8; 0],
}
pub type libcamera_request_buffer_map_t = libcamera_request_buffer_map;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_request_buffer_map_iter {
    _unused: [u8; 0],
}
pub type libcamera_request_buffer_map_iter_t = libcamera_request_buffer_map_iter;
unsafe extern "C" {
    pub fn libcamera_request_destroy(request: *mut libcamera_request_t);
}
unsafe extern "C" {
    pub fn libcamera_request_controls(request: *mut libcamera_request_t) -> *mut libcamera_control_list_t;
}
unsafe extern "C" {
    pub fn libcamera_request_metadata(request: *mut libcamera_request_t) -> *mut libcamera_control_list_t;
}
unsafe extern "C" {
    pub fn libcamera_request_buffers(request: *const libcamera_request_t) -> *const libcamera_request_buffer_map_t;
}
unsafe extern "C" {
    pub fn libcamera_request_add_buffer(
        request: *mut libcamera_request_t,
        stream: *const libcamera_stream_t,
        buffer: *mut libcamera_framebuffer_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_request_find_buffer(
        request: *const libcamera_request_t,
        stream: *const libcamera_stream_t,
    ) -> *mut libcamera_framebuffer_t;
}
unsafe extern "C" {
    pub fn libcamera_request_sequence(request: *const libcamera_request_t) -> u32;
}
unsafe extern "C" {
    pub fn libcamera_request_cookie(request: *const libcamera_request_t) -> u64;
}
unsafe extern "C" {
    pub fn libcamera_request_status(request: *const libcamera_request_t) -> libcamera_request_status_t;
}
unsafe extern "C" {
    pub fn libcamera_request_reuse(request: *mut libcamera_request_t, flags: libcamera_request_reuse_flag_t);
}
unsafe extern "C" {
    pub fn libcamera_request_buffer_map_get(
        buffer_map: *mut libcamera_request_buffer_map_t,
        stream: *const libcamera_stream_t,
    ) -> *mut libcamera_framebuffer_t;
}
unsafe extern "C" {
    pub fn libcamera_request_buffer_map_iter(
        buffer_map: *mut libcamera_request_buffer_map_t,
    ) -> *mut libcamera_request_buffer_map_iter_t;
}
unsafe extern "C" {
    pub fn libcamera_request_buffer_map_iter_destroy(iter: *mut libcamera_request_buffer_map_iter_t);
}
unsafe extern "C" {
    pub fn libcamera_request_buffer_map_iter_end(iter: *const libcamera_request_buffer_map_iter_t) -> bool;
}
unsafe extern "C" {
    pub fn libcamera_request_buffer_map_iter_next(iter: *mut libcamera_request_buffer_map_iter_t);
}
unsafe extern "C" {
    pub fn libcamera_request_buffer_map_iter_stream(
        iter: *mut libcamera_request_buffer_map_iter_t,
    ) -> *const libcamera_stream_t;
}
unsafe extern "C" {
    pub fn libcamera_request_buffer_map_iter_buffer(
        iter: *mut libcamera_request_buffer_map_iter_t,
    ) -> *mut libcamera_framebuffer_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_callback_handle {
    _unused: [u8; 0],
}
pub type libcamera_callback_handle_t = libcamera_callback_handle;
pub mod libcamera_camera_configuration_status {
    pub type Type = ::std::os::raw::c_uint;
    pub const LIBCAMERA_CAMERA_CONFIGURATION_STATUS_VALID: Type = 0;
    pub const LIBCAMERA_CAMERA_CONFIGURATION_STATUS_ADJUSTED: Type = 1;
    pub const LIBCAMERA_CAMERA_CONFIGURATION_STATUS_INVALID: Type = 2;
}
pub type libcamera_request_completed_cb_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut libcamera_request_t)>;
pub use self::libcamera_camera_configuration_status::Type as libcamera_camera_configuration_status_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_camera_configuration_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_camera_t {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn libcamera_camera_configuration_destroy(config: *mut libcamera_camera_configuration_t);
}
unsafe extern "C" {
    pub fn libcamera_camera_configuration_size(config: *const libcamera_camera_configuration_t) -> usize;
}
unsafe extern "C" {
    pub fn libcamera_camera_configuration_at(
        config: *mut libcamera_camera_configuration_t,
        index: usize,
    ) -> *mut libcamera_stream_configuration_t;
}
unsafe extern "C" {
    pub fn libcamera_camera_configuration_validate(
        config: *mut libcamera_camera_configuration_t,
    ) -> libcamera_camera_configuration_status_t;
}
unsafe extern "C" {
    pub fn libcamera_camera_copy(cam: *mut libcamera_camera_t) -> *mut libcamera_camera_t;
}
unsafe extern "C" {
    pub fn libcamera_camera_destroy(cam: *mut libcamera_camera_t);
}
unsafe extern "C" {
    pub fn libcamera_camera_id(cam: *const libcamera_camera_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn libcamera_camera_request_completed_connect(
        cam: *mut libcamera_camera_t,
        callback: libcamera_request_completed_cb_t,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut libcamera_callback_handle_t;
}
unsafe extern "C" {
    pub fn libcamera_camera_request_completed_disconnect(
        cam: *mut libcamera_camera_t,
        handle: *mut libcamera_callback_handle_t,
    );
}
unsafe extern "C" {
    pub fn libcamera_camera_acquire(cam: *mut libcamera_camera_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_camera_release(cam: *mut libcamera_camera_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_camera_controls(cam: *const libcamera_camera_t) -> *const libcamera_control_info_map_t;
}
unsafe extern "C" {
    pub fn libcamera_camera_properties(cam: *const libcamera_camera_t) -> *const libcamera_control_list_t;
}
unsafe extern "C" {
    pub fn libcamera_camera_generate_configuration(
        cam: *mut libcamera_camera_t,
        roles: *const libcamera_stream_role::Type,
        role_count: usize,
    ) -> *mut libcamera_camera_configuration_t;
}
unsafe extern "C" {
    pub fn libcamera_camera_configure(
        cam: *mut libcamera_camera_t,
        config: *mut libcamera_camera_configuration_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_camera_create_request(cam: *mut libcamera_camera_t, cookie: u64) -> *mut libcamera_request_t;
}
unsafe extern "C" {
    pub fn libcamera_camera_queue_request(
        cam: *mut libcamera_camera_t,
        request: *mut libcamera_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_camera_start(
        cam: *mut libcamera_camera_t,
        controls: *const libcamera_control_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_camera_stop(cam: *mut libcamera_camera_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_framebuffer_allocator {
    _unused: [u8; 0],
}
pub type libcamera_framebuffer_allocator_t = libcamera_framebuffer_allocator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_framebuffer_list {
    _unused: [u8; 0],
}
pub type libcamera_framebuffer_list_t = libcamera_framebuffer_list;
unsafe extern "C" {
    pub fn libcamera_framebuffer_allocator_create(
        cam: *mut libcamera_camera_t,
    ) -> *mut libcamera_framebuffer_allocator_t;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_allocator_destroy(alloc: *mut libcamera_framebuffer_allocator_t);
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_allocator_allocate(
        alloc: *mut libcamera_framebuffer_allocator_t,
        stream: *mut libcamera_stream_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_allocator_free(
        alloc: *mut libcamera_framebuffer_allocator_t,
        stream: *mut libcamera_stream_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_allocator_buffers(
        alloc: *mut libcamera_framebuffer_allocator_t,
        stream: *mut libcamera_stream_t,
    ) -> *const libcamera_framebuffer_list_t;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_list_size(list: *const libcamera_framebuffer_list_t) -> usize;
}
unsafe extern "C" {
    pub fn libcamera_framebuffer_list_get(
        list: *const libcamera_framebuffer_list_t,
        index: usize,
    ) -> *const libcamera_framebuffer_t;
}
pub mod libcamera_logging_target {
    pub type Type = ::std::os::raw::c_uint;
    pub const LIBCAMERA_LOGGING_TARGET_NONE: Type = 0;
    pub const LIBCAMERA_LOGGING_TARGET_SYSLOG: Type = 1;
}
pub mod libcamera_logging_stream {
    pub type Type = ::std::os::raw::c_uint;
    pub const LIBCAMERA_LOGGING_STREAM_STDOUT: Type = 0;
    pub const LIBCAMERA_LOGGING_STREAM_STDERR: Type = 1;
}
pub use self::libcamera_logging_stream::Type as libcamera_logging_stream_t;
pub use self::libcamera_logging_target::Type as libcamera_logging_target_t;
unsafe extern "C" {
    pub fn libcamera_log_set_file(path: *const ::std::os::raw::c_char, color: bool) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_log_set_stream(stream: libcamera_logging_stream_t, color: bool) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_log_set_target(target: libcamera_logging_target_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_log_set_level(category: *const ::std::os::raw::c_char, level: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_camera_manager_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libcamera_camera_list_t {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn libcamera_camera_manager_create() -> *mut libcamera_camera_manager_t;
}
unsafe extern "C" {
    pub fn libcamera_camera_manager_destroy(mgr: *mut libcamera_camera_manager_t);
}
unsafe extern "C" {
    pub fn libcamera_camera_manager_start(mgr: *mut libcamera_camera_manager_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn libcamera_camera_manager_stop(mgr: *mut libcamera_camera_manager_t);
}
unsafe extern "C" {
    pub fn libcamera_camera_manager_cameras(mgr: *const libcamera_camera_manager_t) -> *mut libcamera_camera_list_t;
}
unsafe extern "C" {
    pub fn libcamera_camera_manager_get_id(
        mgr: *mut libcamera_camera_manager_t,
        id: *const ::std::os::raw::c_char,
    ) -> *mut libcamera_camera_t;
}
unsafe extern "C" {
    pub fn libcamera_camera_manager_version(mgr: *mut libcamera_camera_manager_t) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn libcamera_camera_list_destroy(list: *mut libcamera_camera_list_t);
}
unsafe extern "C" {
    pub fn libcamera_camera_list_size(list: *mut libcamera_camera_list_t) -> usize;
}
unsafe extern "C" {
    pub fn libcamera_camera_list_get(list: *mut libcamera_camera_list_t, index: usize) -> *mut libcamera_camera_t;
}
